
<div class="col-6 border p-3" @onclick="(args)=>ProductSelected(args,prod.Name)">
    <h4> Product - @prod.Id </h4>

    <input type="checkbox" @onchange="FavouritesUpdated" /> Add to Favourites <br /><br />

    <p>Name - @prod.Name </p>
    Show Properties - <input type="checkbox" @bind="prod.IsActive" />
    <br />
    @if (prod.IsActive)
    {
        <div>
            Properties :
            @foreach (var prop in prod.ProdProperties)
            {
                <div>@prop.Value</div>
            }
        </div>
    }
    <br />
    @*  <div>
                <input type="button" class="btn btn-danger" value="Delete" @onclick="()=>RemoveProduct(prod.Id)" />
            </div> *@

    <_DeleteButton Id="@prod.Id" OnRemoveProduct="RemoveProduct"></_DeleteButton>
</div>

@code {

    [Parameter]
    public IReadOnlyList<Product> ProductList { get; set; }

    [Parameter]
    public Product prod { get; set; }

    [Parameter]
    public EventCallback<bool> OnFavouriteUpdated { get; set; }
    
    [Parameter]
    public EventCallback<string> OnSelectedProdChange { get; set; }

    private async Task FavouritesUpdated(ChangeEventArgs args)
    {
        await OnFavouriteUpdated.InvokeAsync((bool)(args.Value ?? false));
    }

    private async Task ProductSelected(MouseEventArgs args, string prodName)
    {
        await OnSelectedProdChange.InvokeAsync(prodName);
    }

    private void RemoveProduct(int Id)
    {
        var newList = ProductList.ToList();
        var Prod = newList.FirstOrDefault(x => x.Id == Id);

        if (Prod != null)
        {
            newList.Remove(Prod);
        }
        //return newList;
    }
}
